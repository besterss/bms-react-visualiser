const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./index-CLYsgPg8.js","./index-CCL7OHvF.css","./pass.fragment-DWkJEBYH.js"])))=>i.map(i=>d[i]);
import{e as I,T as m,_,x as u}from"./index-CLYsgPg8.js";import{E as x,a as P}from"./passPostProcess-DepNXkdE.js";let l,d=null;async function S(){return d||(d=new Promise((t,r)=>{let n,e=null;const o={preserveDrawingBuffer:!0,depth:!1,stencil:!1,alpha:!0,premultipliedAlpha:!1,antialias:!1,failIfMajorPerformanceCaveat:!1};_(()=>import("./index-CLYsgPg8.js").then(i=>i.X),__vite__mapDeps([0,1]),import.meta.url).then(({ThinEngine:i})=>{const f=u.Instances.length;try{n=new OffscreenCanvas(100,100),e=new i(n,!1,o)}catch{f<u.Instances.length&&u.Instances.pop()?.dispose(),n=document.createElement("canvas"),e=new i(n,!1,o)}u.Instances.pop(),u.OnEnginesDisposedObservable.add(a=>{e&&a!==e&&!e.isDisposed&&u.Instances.length===0&&y()}),e.getCaps().parallelShaderCompile=void 0;const p=new x(e);_(async()=>{const{passPixelShader:a}=await import("./pass.fragment-DWkJEBYH.js");return{passPixelShader:a}},__vite__mapDeps([2,0,1]),import.meta.url).then(({passPixelShader:a})=>{if(!e){r("Engine is not defined");return}const s=new P({engine:e,name:a.name,fragmentShader:a.shader,samplerNames:["textureSampler"]});l={canvas:n,engine:e,renderer:p,wrapper:s},t(l)})}).catch(r)})),await d}async function E(t,r,n,e,o="image/png",i,f){const p=await n.readPixels(0,0,t,r),a=new Uint8Array(p.buffer);g(t,r,a,e,o,i,!0,void 0,f)}async function v(t,r,n,e="image/png",o,i=!1,f=!1,p){return await new Promise(a=>{g(t,r,n,s=>a(s),e,o,i,f,p)})}function g(t,r,n,e,o="image/png",i,f=!1,p=!1,a){S().then(s=>{if(s.engine.setSize(t,r,!0),n instanceof Float32Array){const w=new Uint8Array(n.length);let c=n.length;for(;c--;){const D=n[c];w[c]=Math.round(I(D)*255)}n=w}const h=s.engine.createRawTexture(n,t,r,5,!1,!f,1);s.renderer.setViewport(),s.renderer.applyEffectWrapper(s.wrapper),s.wrapper.effect._bindTexture("textureSampler",h),s.renderer.draw(),p?m.ToBlob(s.canvas,w=>{const c=new FileReader;c.onload=D=>{const A=D.target.result;e&&e(A)},c.readAsArrayBuffer(w)},o,a):m.EncodeScreenshotCanvasData(s.canvas,e,o,i,a),h.dispose()})}function y(){l?(l.wrapper.dispose(),l.renderer.dispose(),l.engine.dispose()):d?.then(t=>{t.wrapper.dispose(),t.renderer.dispose(),t.engine.dispose()}),d=null,l=null}const C={DumpData:g,DumpDataAsync:v,DumpFramebuffer:E,Dispose:y},R=()=>{m.DumpData=g,m.DumpDataAsync=v,m.DumpFramebuffer=E};R();export{y as Dispose,g as DumpData,v as DumpDataAsync,E as DumpFramebuffer,C as DumpTools};
